from flask import Flask, render_template, request, redirect, url_for
import sqlite3
from datetime import datetime

app = Flask(__name__)

# Database setup
def init_db():
    conn = sqlite3.connect('salary.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS employees (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    salary REAL NOT NULL,
                    advances REAL DEFAULT 0,
                    absents INTEGER DEFAULT 0
                )''')
    conn.commit()
    conn.close()

@app.route('/')
def index():
    conn = sqlite3.connect('salary.db')
    c = conn.cursor()
    c.execute("SELECT * FROM employees")
    employees = c.fetchall()
    conn.close()
    return render_template("index.html", employees=employees)

@app.route('/add_employee', methods=['POST'])
def add_employee():
    name = request.form['name']
    salary = float(request.form['salary'])
    conn = sqlite3.connect('salary.db')
    c = conn.cursor()
    c.execute("INSERT INTO employees (name, salary) VALUES (?, ?)", (name, salary))
    conn.commit()
    conn.close()
    return redirect(url_for('index'))

@app.route('/give_advance/<int:emp_id>', methods=['POST'])
def give_advance(emp_id):
    amount = float(request.form['amount'])
    conn = sqlite3.connect('salary.db')
    c = conn.cursor()
    c.execute("UPDATE employees SET advances = advances + ? WHERE id = ?", (amount, emp_id))
    conn.commit()
    conn.close()
    return redirect(url_for('index'))

@app.route('/mark_absent/<int:emp_id>', methods=['POST'])
def mark_absent(emp_id):
    days = int(request.form['days'])
    conn = sqlite3.connect('salary.db')
    c = conn.cursor()
    c.execute("UPDATE employees SET absents = absents + ? WHERE id = ?", (days, emp_id))
    conn.commit()
    conn.close()
    return redirect(url_for('index'))

@app.route('/calculate_salary/<int:emp_id>')
def calculate_salary(emp_id):
    conn = sqlite3.connect('salary.db')
    c = conn.cursor()
    c.execute("SELECT salary, advances, absents FROM employees WHERE id = ?", (emp_id,))
    emp = c.fetchone()
    conn.close()
    
    monthly_salary = emp[0]
    advance = emp[1]
    absents = emp[2]
    per_day = monthly_salary / 30
    final_salary = monthly_salary - advance - (per_day * absents)
    
    return f"Final Salary: â‚¹{final_salary:.2f}"

if __name__ == '__main__':
    init_db()
    app.run(debug=True)
